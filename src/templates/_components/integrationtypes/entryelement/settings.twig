{% import "_includes/forms" as forms %}

{{ forms.selectField({
    first: true,
    required: true,
    label: "Entry Type <span class='info'>Create an entry on this section</span>"|t('sprout-forms'),
    id: 'entryTypeId',
    name: 'entryTypeId',
    options: sectionsOptions,
    value: integration.entryTypeId
}) }}

<script>
    $(document).ready(function() {
        init();
        // We have 2 scenarios:
        // 1.- on load (the init function should load current rows with proper dropdown)
        // 2.- When user update the section dropdown (Update all rows field dropdown)

        function init(){
            // Init all empty field selects
            updateAllFieldSelects()
            // When the entry type is changed
            $('#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-entryTypeId').change(function() {
                var changed = $(this).val() != $(this).data('default');
                if (changed){
                    updateAllFieldSelects();
                }
            });

            disableOptions();
        }

        function disableOptions()
        {
            var $formFields = getCurrentRows('.formField');
            $formFields.each(function(index){
                var $textarea = $(this).find('textarea');
                $textarea.prop("disabled", false);
                $textarea.prop("readonly", true);
            });

            var $formEntryFields = getCurrentRows('.formEntryFields');
            $formEntryFields.each(function(index){
                var $select = $(this).find('select');
                $select.prop("disabled", false);
            });
        }

        function updateAllFieldSelects() {
            var $table = $("#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-fieldsMapped");
            var $currentRows = getCurrentRows();
            var data = getEntryFieldsData();
            Craft.postActionRequest('sprout-forms/integrations/get-entry-fields', data, $.proxy(function(response, textStatus)
            {
                var statusSuccess = (textStatus === 'success');

                if(statusSuccess && response.success) {
                    var rows = response.fieldOptionsByRow;
                    $currentRows.each(function(index){
                        var $select = $(this).find('select');
                        var fields = rows[index];
                        appendFieldsToSelect($select, fields);
                    });
                }
                else
                {
                    Craft.cp.displayError(Craft.t('sprout-forms','Unable to get the Entry fields'));
                }
            }, this));

        }

        function getEntryFieldsData()
        {
            var entryTypeId = $('#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-entryTypeId').val();
            var integrationId = $('#integrationId').val();
            var data = {
                'entryTypeId':entryTypeId,
                'integrationId':integrationId
            };

            return data;
        }

        function getCurrentRows(className = null)
        {
            if (className === null){
                className = 'tbody .formEntryFields';
            }
            return $(className);
        }

        function appendFieldsToSelect($select, fields) {
            $select.empty();
            for (i = 0; i < fields.length; i++) {
                var field = fields[i];
                var selectedCode = '';
                if ("selected" in field){
                    selectedCode = 'selected';
                }
                $select.append('<option '+selectedCode+' value="'+field['value']+'">'+field['label']+'</option>');
            }
        }
    });
</script>
{% js %}

{% endjs %}



