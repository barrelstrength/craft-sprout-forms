{% import "_includes/forms" as forms %}

{{ forms.selectField({
    first: true,
    required: true,
    label: "Entry Type <span class='info'>Create an entry on this section</span>"|t('sprout-forms'),
    id: 'entryTypeId',
    name: 'entryTypeId',
    options: sectionsOptions,
    value: integration.entryTypeId
}) }}

{{ forms.elementSelectField({
    label: "Default Author"|t('app'),
    id: 'authorId',
    name: 'authorId',
    required: true,
    elementType: integration.getUserElementType(),
    selectionLabel: "Choose"|t('app'),
    limit: 1,
    elements: [integration.getAuthor()]
}) }}

{{ forms.lightswitchField({
    label: "Set Author to Logged in User"|t('sprout-forms'),
    instructions: "When enabled, Sprout Forms will assign the logged in User as the author and fallback to the Default Author."|t('sprout-forms'),
    id: 'enableSetAuthorToLoggedInUser',
    name: 'enableSetAuthorToLoggedInUser',
    toggle: 'settings-save-author',
    on: integration.enableSetAuthorToLoggedInUser,
    onLabel: "Enable"|t('sprout-forms'),
}) }}

<script>
    $(document).ready(function() {
        init();
        // We have 2 scenarios:
        // 1.- on load (the init function should load current rows with proper dropdown)
        // 2.- When user update the section dropdown (Update all rows field dropdown)

        function init() {
            // Init all empty field selects
            updateAllFieldSelects()
            // When the entry type is changed
            $('#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-entryTypeId').change(function() {
                var changed = $(this).val() != $(this).data('default');
                if (changed) {
                    updateAllFieldSelectsAndRemoveRows();
                }
            });

            disableOptions();
        }

        function disableOptions() {
            var $formFields = getCurrentRows('.formField');
            $formFields.each(function(index) {
                var $textarea = $(this).find('textarea');
                $textarea.prop("disabled", false);
                $textarea.prop("readonly", true);
            });

            var $formEntryFields = getCurrentRows('.formEntryFields');
            $formEntryFields.each(function(index) {
                var $select = $(this).find('select');
                $select.prop("disabled", false);
            });
        }

        function updateAllFieldSelectsAndRemoveRows() {
            var tableId = "#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-fieldsMapped";
            $(tableId + " tbody tr").remove();
            var data = getEntryFieldsData();

            Craft.postActionRequest('sprout-forms/integrations/get-element-entry-fields', data, $.proxy(function(response, textStatus) {
                var statusSuccess = (textStatus === 'success');

                if (statusSuccess && response.success) {
                    var rows = response.fieldOptionsByRow;
                    for (i = 0; i < rows.length; i++) {
                        var field = rows[i];
                        $(tableId + ' tbody').append('<tr data-id="' + i + '"> <td class="textual code formField"><textarea name="types[barrelstrength\\sproutforms\\integrationtypes\\EntryElementIntegration][fieldsMapped][' + i + '][integrationField]" rows="1" readonly> ' + field["value"] + '</textarea></td> <td class="formEntryFields"><div class="select small"><select name="types[barrelstrength\\sproutforms\\integrationtypes\\EntryElementIntegration][fieldsMapped][' + i + '][sproutFormField]"></select></div></td></tr>');
                        updateAllFieldSelects();
                    }
                } else {
                    Craft.cp.displayError(Craft.t('sprout-forms', 'Unable to get the Entry fields'));
                }
            }, this));
        }

        function updateAllFieldSelects() {
            var $currentRows = getCurrentRows();
            var data = getEntryFieldsData();
            Craft.postActionRequest('sprout-forms/integrations/get-form-fields', data, $.proxy(function(response, textStatus) {
                var statusSuccess = (textStatus === 'success');

                if (statusSuccess && response.success) {
                    var rows = $.parseJSON(response.fieldOptionsByRow);

                    $currentRows.each(function(index) {
                        var $select = $(this).find('select');
                        var fields = rows[index];
                        appendFieldsToSelect($select, fields);
                    });
                } else {
                    Craft.cp.displayError(Craft.t('sprout-forms', 'Unable to get the Form fields'));
                }
            }, this));

        }

        function getEntryFieldsData() {
            var entryTypeId = $('#types-barrelstrength-sproutforms-integrationtypes-EntryElementIntegration-entryTypeId').val();
            var integrationId = $('#integrationId').val();
            var data = {
                'entryTypeId': entryTypeId,
                'integrationId': integrationId
            };

            return data;
        }

        function getCurrentRows(className = null) {
            if (className === null) {
                className = 'tbody .formEntryFields';
            }
            return $(className);
        }

        function appendFieldsToSelect($select, fields) {
            $select.empty();
            var closeOptgroup = false;

            for (i = 0; i < fields.length; i++) {
                var field = fields[i];
                var selectedCode = '';
                if ("optgroup" in field) {
                    if (closeOptgroup) {
                        $select.append('</optgroup>');
                        closeOptgroup = false;
                    }
                    $select.append('<optgroup label="' + field['optgroup'] + '">');
                    closeOptgroup = true;
                } else {
                    if ("selected" in field) {
                        selectedCode = 'selected';
                    }
                    $select.append('<option ' + selectedCode + ' value="' + field['value'] + '">' + field['label'] + '</option>');
                }

            }
        }
    });
</script>
{% js %}

{% endjs %}



