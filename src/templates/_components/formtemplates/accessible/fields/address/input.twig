{%- set id = renderingOptions.id ?? name %}
{%- set class = renderingOptions.class ?? name %}
{%- set required = field.required ? true : false %}
{%- set hasInstructions = field.instructions ? true : false %}

{%- set dataAttributes = null %}
{%- set data = renderingOptions.data ?? null %}
{%- for key, dataValue in data %}
    {%- set dataAttributes = dataAttributes ~ ' data-'~key~'='~dataValue %}
{% endfor -%}

    {#{%- if required %} required aria-required="true"{% endif %}#}
    {#{%- if hasInstructions %} aria-describedby="{{ field.getNamespace() }}-{{ id }}-instructions"{% endif %}#}

{# This will wrap the generated HTML for all the address fields #}
<div{%- if id %} id="{{ id }}"{% endif %} class="{{ name }}-wrapper sproutaddressfield-form-fields {%- if class %} {{ class }}{% endif %}" {{- dataAttributes|raw -}}>
    {# The select.html file is used for the Country dropdown fields. It will also be used used for the Region dropdown fields if hey exist, in the {{ form }} output below. #}
    {{ countryInputHtml }}

    {# The form output will include several fields that use the text.html and select.html fields. #}
    <div class="sproutaddressfield-country-fields">
        {{ addressFormHtml }}
    </div>
    {# the hidden.html file will be output here ??? #}
</div>

{# Store our dynamic field template path for our address field logic #}
{% do craft.app.getSession().set('sproutforms-templatepath-fields', craft.app.getView().getTemplatesPath()) %}

<script>
    {% if showCountryDropdown %}
    document.getElementById('{{ field.getNamespace() }}-sproutaddressfield-country-select').addEventListener('change', function(){
        updateFormFields(this);
    });
    {% endif %}

    function updateFormFields(el) {
        var oForm = el.closest('form');

        var csrfValue = oForm.elements["{{ csrfTokenName  }}"].value;

        var data = {
            namespace: "{{ field.getNamespace() ~ '[' ~ name ~ ']' }}",
            countryCode: el.value,
            overrideTemplatePaths: true
        };
        var params = typeof data == 'string' ? data : Object.keys(data).map(
            function(k){ return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]) }
        ).join('&');

        var http = new XMLHttpRequest();

        http.open('POST', '{{ actionUrl }}', true);
        http.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        http.onreadystatechange = function() {

            //Call a function when the state changes.
            if(http.readyState === 4 && http.status === 200) {

                removeElements('.sproutaddressfield-update-onchange-field', oForm);
                var response = JSON.parse(http.response);
                var countrySpecificFields = oForm.querySelector('.sproutaddressfield-country-fields');

                countrySpecificFields.innerHTML = response.html;
            }
        };

        http.setRequestHeader('X-CSRF-Token', csrfValue);
        http.setRequestHeader('Accept', 'application/json; charset=utf-8');
        http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');

        http.send(params);
    }

    function removeElements(classes, oForm) {
        var inputs = oForm.querySelectorAll(classes);

        for (var key in inputs) {
            var elem = inputs[key];

            if (typeof elem.parentNode !== 'undefined') {
                elem.parentNode.removeChild(elem);
            }
        }
    }
</script>